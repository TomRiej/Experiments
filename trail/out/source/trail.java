/* autogenerated by Processing revision 1277 on 2021-11-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class trail extends PApplet {

ArrayList<Particle> particles = new ArrayList<Particle>();
boolean mouseOnScreen = false;
int hue = 0;
Particle p, p2;
int maxConnections = 100000;



 public void setup() {
    /* size commented out by preprocessor */;
    colorMode(HSB, 360, 100, 100);
}

 public void draw() {
    background(0);
    for (int i = particles.size()-1; i >= 0; i--) {
        p = particles.get(i);
        p.update();
        p.draw();
        if (random(1) < 1) {
            int connects = 0;
            int j = particles.size()-1;
            while (connects < maxConnections && j >= 0) {
                p2 = particles.get(j);
                if (sq(p2.getX() - p.getX()) + sq(p2.getY() - p.getY()) < 5000) {
                    stroke(p.getColour());
                    strokeWeight(0.4f);
                    line(p.getX(), p.getY(), p2.getX(), p2.getY());
                    connects++;
                } 
                j--;
            }
        }
        if (p.finished()) {
            particles.remove(i);
        }
    }

    // change colour
    if (hue < 360){
            hue++;
        } else {
            hue = 0;
        }

    println(particles.size());
}

 public void mouseMoved() {
    if (mouseOnScreen) {
        particles.add(new Particle(hue));
    }
}

 public void mouseEntered() {
    mouseOnScreen = true;
}

 public void mouseExited() {
    mouseOnScreen = false;
}
class Particle {
    PVector pos;
    PVector vel;
    float size = random(5, 30);
    int colour;

    Particle(int hue) {
        pos = new PVector(mouseX+random(-2, 2), mouseY+random(-2, 2));
        vel = new PVector(random(-2,2), random(-2,2));
        colour = color(hue, 100, 100);
    }

     public void update() {
        pos.add(vel);
        size -= 0.2f;
    }

     public void draw() {
        noStroke();
        fill(colour);
        ellipse(pos.x, pos.y, size, size);
        
    }

     public int getColour() {
        return colour;
    }

     public float getX() {
        return pos.x;
    }

     public float getY() {
        return pos.y;
    }

     public boolean finished() {
        return (size < 8.0f);
    }

}


  public void settings() { size(1200, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "trail" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
